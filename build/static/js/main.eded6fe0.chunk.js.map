{"version":3,"sources":["components/Note.js","services/Notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","baseUrl","Notes","getAll","axios","get","crossdomain","then","response","data","create","newObject","post","update","id","put","Footer","style","color","fontStyle","fontsize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","useEffect","console","log","notesService","initialNotes","catch","error","alert","length","notesToShow","filter","map","find","n","changedNote","returnedNote","onSubmit","event","preventDefault","target","noteToSend","date","Date","Math","random","concat","value","onChange","type","ReactDOM","render","document","getElementById"],"mappings":"4KAaeA,EAVF,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,iBACXC,EAAQF,EAAKG,UAAY,mBAAqB,iBACpD,OACI,qBAAIC,UAAU,OAAd,UACKJ,EAAKK,QACN,wBAAQC,QAASL,EAAjB,SAAoCC,Q,gBCP1CK,EAAU,aA0BDC,EAND,CACVC,OAnBW,WACX,OAAOC,IACFC,IAAIJ,EAAS,CAACK,aAAa,IAC3BC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAiB/BC,OAdW,SAAAC,GACX,OAAOP,IACFQ,KAAKX,EAASU,EAAW,CAACL,aAAa,IACvCC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAY/BI,OATW,SAACC,EAAIH,GAChB,OAAOP,IACFW,IADE,UACKd,EADL,YACgBa,GAAMH,EAAW,CAACL,aAAa,IACjDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UCZ7BO,G,MAAS,WAMX,OACI,sBAAKC,MANW,CAChBC,MAAO,OACPC,UAAW,OACXC,SAAU,GAGV,UACI,uBACA,4GAgFGC,EA3EH,WACR,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,SAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KAEAC,qBAAU,WACNC,QAAQC,IAAI,UACZC,EACK7B,SACAI,MAAK,SAAA0B,GACFH,QAAQC,IAAI,qBACZP,EAASS,MAEZC,OAAM,SAAAC,GACHC,MAAMD,QAEf,IACHL,QAAQC,IAAI,UAAWR,EAAMc,OAAQ,UAErC,IAsBMC,EAAcX,EAAUJ,EAAQA,EAAMgB,QAAO,SAAA7C,GAAI,OAAIA,EAAKG,aAchE,OACI,qCACI,uCACA,8BACI,yBAAQG,QAAS,kBAAM4B,GAAYD,IAAnC,kBACUA,EAAS,YAAc,WAGrC,6BACKW,EAAYE,KAAI,SAAA9C,GAAI,OAAI,cAAC,EAAD,CAAoBA,KAAMA,EAAMC,iBAAkB,kBArB9D,SAACmB,GACtBgB,QAAQC,IAAI,uBACZ,IAAMrC,EAAO6B,EAAMkB,MAAK,SAAAC,GAAC,OAAIA,EAAE5B,KAAOA,KAChC6B,EAAW,2BAAOjD,GAAP,IAAaG,WAAYH,EAAKG,YAC/CmC,EACKnB,OAAOC,EAAI6B,GACXpC,MAAK,SAAAqC,GACFpB,EAASD,EAAMiB,KAAI,SAAA9C,GAAI,OAAIA,EAAKoB,KAAMA,EAAK8B,EAAelD,SAcuBC,CAAiBD,EAAKoB,MAAnEpB,EAAKoB,SAE7C,uBAAM+B,SA/CE,SAACC,GACbA,EAAMC,iBACNjB,QAAQC,IAAIe,EAAME,QAClB,IAAMC,EAAa,CACflD,QAAU0B,EACVyB,KAAO,IAAIC,KACXtD,UAAYuD,KAAKC,SAAW,IAEhCrB,EACKtB,OAAOuC,GACP1C,MAAK,SAAAqC,GACFd,QAAQC,IAAIa,GACZpB,EAASD,EAAM+B,OAAOV,IACtBlB,EAAW,QAkCf,UACI,uBAAO6B,MAAO9B,EAAS+B,SA/BV,SAACV,GACtBhB,QAAQC,IAAIe,EAAME,OAAOO,OACzB7B,EAAWoB,EAAME,OAAOO,UA8BhB,wBAAQE,KAAK,SAAb,yBAEJ,cAAC,EAAD,QCrFJC,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.eded6fe0.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\nconst Note = ({note, toggleImportance}) => {\r\n    const label = note.important ? 'make unimportant' : 'make important';\r\n    return (\r\n        <li className=\"note\">\r\n            {note.content}\r\n            <button onClick={toggleImportance}>{label}</button>\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default Note;","import axios from 'axios'\r\nconst baseUrl = '/api/notes'\r\n\r\nconst getAll = () => {\r\n    return axios\r\n        .get(baseUrl, {crossdomain: true})\r\n        .then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n    return axios\r\n        .post(baseUrl, newObject, {crossdomain: true})\r\n        .then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    return axios\r\n        .put(`${baseUrl}/${id}`, newObject, {crossdomain: true})\r\n        .then(response => response.data)\r\n}\r\n\r\nconst Notes = {\r\n    getAll,\r\n    create,\r\n    update\r\n}\r\n\r\nexport default Notes;","import React, {useEffect, useState} from 'react';\nimport Note from \"./components/Note\";\n\nimport notesService from \"./services/Notes\"\nimport './index.css'\n\nconst Footer = () => {\n    const footerStyle = {\n        color: 'blue',\n        fontStyle: 'bold',\n        fontsize: 8\n    }\n    return (\n        <div style={footerStyle}>\n            <br/>\n            <em>Note app, Department of Computer Science, University of Helsinki 2021</em>\n        </div>\n    )\n}\n\nconst App = () => {\n    const [notes, setNotes] = useState([]);\n    const [newNote, setNewNote] = useState('Empty');\n    const [showAll, setShowAll] = useState(true);\n\n    useEffect(() => {\n        console.log('Effect');\n        notesService\n            .getAll()\n            .then(initialNotes => {\n                console.log('Promise fulfilled');\n                setNotes(initialNotes);\n            })\n            .catch(error => {\n                alert(error);\n            })\n    }, []);\n    console.log('Render ', notes.length, ' notes');\n\n    const addNote = (event) => {\n        event.preventDefault();\n        console.log(event.target);\n        const noteToSend = {\n            content : newNote,\n            date : new Date(),\n            important : Math.random() < 0.5\n        }\n        notesService\n            .create(noteToSend)\n            .then(returnedNote => {\n                console.log(returnedNote);\n                setNotes(notes.concat(returnedNote));\n                setNewNote('');\n            });\n    }\n\n    const handleNoteChange = (event) => {\n        console.log(event.target.value);\n        setNewNote(event.target.value);\n    }\n\n    const notesToShow = showAll ? notes : notes.filter(note => note.important)\n\n    const toggleImportance = (id) => {\n        console.log('Toggling importance');\n        const note = notes.find(n => n.id === id);\n        const changedNote = {...note, important: !note.important};\n        notesService\n            .update(id, changedNote)\n            .then(returnedNote => {\n                setNotes(notes.map(note => note.id ===id ? returnedNote : note))\n            });\n    }\n\n    // debugger\n    return (\n        <>\n            <h1>Notes</h1>\n            <div>\n                <button onClick={() => setShowAll(!showAll)}>\n                    show {showAll? 'important' : 'all'}\n                </button>\n            </div>\n            <ul>\n                {notesToShow.map(note => <Note key={note.id} note={note} toggleImportance={() => toggleImportance(note.id)}/> )}\n            </ul>\n            <form onSubmit={addNote}>\n                <input value={newNote} onChange={handleNoteChange}/>\n                <button type=\"submit\">Add note</button>\n            </form>\n            <Footer/>\n        </>\n    )\n}\n\nexport default App;\n","\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\n        ReactDOM.render(\n            <App />,\n            document.getElementById('root')\n        );\n\n\n\n"],"sourceRoot":""}